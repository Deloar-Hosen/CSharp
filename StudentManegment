using System;
using System.Runtime.CompilerServices;

class Student
{
    // Private property to store the student's name
    private string? Name
    {
        set;
        get;
    }

    // Private property to store the student's date of birth
    private DateTime DateOfBirth
    {
        set;
        get;
    }

    // Private property to store the student's education
    private string Education
    {
        set;
        get;
    }

    // Private method to calculate the student's age based on their date of birth
    private int CalculateAge()
    {
        // Calculate age by subtracting birth year from the current year
        int age = DateTime.Now.Year - DateOfBirth.Year;

        // If the birthday hasn't occurred yet this year, decrement the age by 1
        return DateTime.Now < DateOfBirth.AddYears(age) ? age - 1 : age;
    }

    // Public property to get the calculated age of the student
    public int Age => CalculateAge();

    // Constructor to initialize student properties, with validation for inputs
    public Student(string name, DateTime dateOfBirth, string education)
    {
        ValidateInput(name, dateOfBirth, education);
        Name = name;
        DateOfBirth = dateOfBirth;
        Education = education;
    }

    // Private static method to validate input values for name, dateOfBirth, and education
    private static void ValidateInput(string name, DateTime dateOfBirth, string education)
    {
        // Check if the date of birth is in the future; if so, throw an exception
        if (dateOfBirth > DateTime.Now)
        {
            throw new ArgumentException("Exception: DateOfBirth cannot be in the future.");
        }
        
        // Check if date of birth is uninitialized; if so, throw an exception
        if (dateOfBirth == default)
        {
            throw new ArgumentException("Exception: DateOfBirth cannot be null or empty.");
        }
        
        // Check if the name is null or empty; if so, throw an exception
        if (string.IsNullOrWhiteSpace(name))
        {
            throw new ArgumentException("Exception: Name cannot be null or empty.");
        }
        
        // Check if the education field is null or empty; if so, throw an exception
        if (string.IsNullOrEmpty(education))
        {
            throw new ArgumentException("Exception: Education cannot be null or empty.");
        }
    }

    // Method to print the student's details
    public void PrintDetails()
    {
        Console.WriteLine($"Name: {Name}\n" +
                          $"DateOfBirth: {DateOfBirth.ToShortDateString()}\n" +
                          $"Education: {Education}\n" +
                          $"Age: {Age}\n\n");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        try
        {
            // Create two student objects with sample data
            Student student1 = new Student("Deloar Hosen", new DateTime(2003, 11, 10), "CSE-32");
            Student student2 = new Student("Imtiaz Mahmud", new DateTime(2004, 03, 23), "ICT-26");

            // Print details of each student
            student1.PrintDetails();
            student2.PrintDetails();
        }
        catch (Exception e)
        {
            // Display any exceptions that occur during object creation or method calls
            Console.WriteLine($"{e.Message}");
        }
    }
}
